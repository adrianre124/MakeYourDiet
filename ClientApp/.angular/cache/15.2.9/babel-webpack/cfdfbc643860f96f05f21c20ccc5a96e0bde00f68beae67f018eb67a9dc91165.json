{"ast":null,"code":"import { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport class ErrorInterceptor {\n  constructor(router, toastr) {\n    this.router = router;\n    this.toastr = toastr;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        switch (error.status) {\n          case 400:\n            if (error.error.errors) {\n              const modelStateErrors = [];\n              for (const key in error.error.errors) {\n                if (error.error.errors[key]) {\n                  modelStateErrors.push(error.error.errors[key]);\n                }\n              }\n              throw modelStateErrors.flat();\n            } else {\n              this.toastr.error(error.error, error.status.toString());\n            }\n            break;\n          case 401:\n            this.toastr.error('Unauthorized', error.status.toString());\n            break;\n          case 404:\n            this.router.navigateByUrl('/not-found');\n            break;\n          case 500:\n            const navigationExtras = {\n              state: {\n                error: error.error\n              }\n            };\n            this.router.navigateByUrl('/server-error', navigationExtras);\n            break;\n          default:\n            this.toastr.error('Something unexpected went wrong');\n            console.log(error);\n            break;\n        }\n      }\n      throw error;\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;;;;AAK7C,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,MAAc,EAAUC,MAAqB;IAA7C,WAAM,GAAND,MAAM;IAAkB,WAAM,GAANC,MAAM;EAAkB;EAEpEC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BT,UAAU,CAAEU,KAAwB,IAAI;MACtC,IAAIA,KAAK,EAAE;QACT,QAAOA,KAAK,CAACC,MAAM;UACjB,KAAK,GAAG;YACN,IAAID,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;cACtB,MAAMC,gBAAgB,GAAG,EAAE;cAC3B,KAAK,MAAMC,GAAG,IAAIJ,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE;gBACpC,IAAIF,KAAK,CAACA,KAAK,CAACE,MAAM,CAACE,GAAG,CAAC,EAAE;kBAC3BD,gBAAgB,CAACE,IAAI,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAACE,GAAG,CAAC,CAAC;;;cAGlD,MAAMD,gBAAgB,CAACG,IAAI,EAAE;aAC9B,MACI;cACH,IAAI,CAACZ,MAAM,CAACM,KAAK,CAACA,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACC,MAAM,CAACM,QAAQ,EAAE,CAAC;;YAEzD;UACF,KAAK,GAAG;YACN,IAAI,CAACb,MAAM,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACC,MAAM,CAACM,QAAQ,EAAE,CAAC;YAC1D;UACF,KAAK,GAAG;YACN,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,YAAY,CAAC;YACvC;UACF,KAAK,GAAG;YACN,MAAMC,gBAAgB,GAAqB;cAACC,KAAK,EAAE;gBAACV,KAAK,EAAEA,KAAK,CAACA;cAAK;YAAC,CAAC;YACxE,IAAI,CAACP,MAAM,CAACe,aAAa,CAAC,eAAe,EAAEC,gBAAgB,CAAC;YAC5D;UACF;YACE,IAAI,CAACf,MAAM,CAACM,KAAK,CAAC,iCAAiC,CAAC;YACpDW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;YAClB;QAAM;;MAGZ,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AA1CWT,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAsB,SAAhBtB,gBAAgB;AAAA","names":["catchError","ErrorInterceptor","constructor","router","toastr","intercept","request","next","handle","pipe","error","status","errors","modelStateErrors","key","push","flat","toString","navigateByUrl","navigationExtras","state","console","log","factory"],"sourceRoot":"","sources":["D:\\CSharp\\MakeYourDiet\\ClientApp\\src\\app\\_interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { NavigationExtras, Router } from '@angular/router';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router, private toastr: ToastrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error) {\n          switch(error.status) {\n            case 400:\n              if (error.error.errors) {\n                const modelStateErrors = [];\n                for (const key in error.error.errors) {\n                  if (error.error.errors[key]) {\n                    modelStateErrors.push(error.error.errors[key])\n                  }\n                }\n                throw modelStateErrors.flat();\n              }\n              else {\n                this.toastr.error(error.error, error.status.toString());\n              }\n              break;\n            case 401:\n              this.toastr.error('Unauthorized', error.status.toString());\n              break;\n            case 404:\n              this.router.navigateByUrl('/not-found');\n              break;\n            case 500:\n              const navigationExtras: NavigationExtras = {state: {error: error.error}};\n              this.router.navigateByUrl('/server-error', navigationExtras);\n              break;\n            default:\n              this.toastr.error('Something unexpected went wrong');\n              console.log(error);\n              break;\n          }\n        }\n        throw error;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}